{"version":3,"sources":["src/gatsby-node.js"],"names":["options","boundActionCreators","path","id","body","createNode","results","data","map","content","unpackAllVariants","forEach","datum","productId","parent","children","internal","type","contentDigest","createHash","update","JSON","stringify","digest","sourceNodes","arr","res","products","unpackVariants","product","concat","obj","variant","variants","ids","push","productsClone","variantsArr","i","length","splice","console","log"],"mappings":"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","file":"gatsby-node.js","sourcesContent":["import crypto from 'crypto'\nimport glob from 'globby'\nimport matter from 'front-matter'\nimport readMarkdown from 'read-markdown'\n\nfunction unpackAllVariants(arr, options){\n\tlet res = []\n\tarr.forEach(product => {\n\t\tlet products = unpackVariants(product, options)\n\t\tres = res.concat(products)\n\t})\n\treturn res\n}\n\nfunction unpackVariants(obj, options) {\n\tlet parent = {\n\t\t...obj,\n\t\tvariant: false,\n\t}\n\tif (typeof parent.variants !== 'object') {\n\t\treturn [ parent ]\n\t}\n\tlet products = [ parent ]\n\tlet ids = [ parent[options.id] ]\n\tlet variants = parent.variants\n\tdelete parent.variants\n\tvariants.forEach(product => {\n\t\tproduct = {\n\t\t\t...obj,\n\t\t\t...product,\n\t\t\tvariant: true,\n\t\t}\n\t\tids.push(product[options.id])\n\t\tproducts.push(product)\n\t})\n\tproducts.forEach(product => {\n\t\tlet productsClone = products.map(product => {\n\t\t\tlet obj = {\n\t\t\t\t...product\n\t\t\t}\n\t\t\tdelete obj.variants\n\t\t\treturn obj\n\t\t})\n\t\tlet variantsArr = [ ...productsClone ]\n\n\t\tfor(let i = variantsArr.length; i--;){\n\t\t\tif(variantsArr[i].id === product.id){\n\t\t\t\tvariantsArr.splice(i, 1)\n\t\t\t}\n\t\t}\n\n\t\tif(product.id === 'A4CB21005R'){\n\t\t\tconsole.log(variantsArr)\n\t\t}\n\t\tproduct.variants = variantsArr\n\t})\n\treturn products\n}\n\nexport async function sourceNodes({ boundActionCreators }, options){\n\toptions = {\n\t\tpath: `./src/markdown/products/**/*.md`,\n\t\tid: `id`,\n\t\tbody: `body`,\n\t\t...options\n\t}\n\tconst { createNode } = boundActionCreators\n\n\tlet data = await readMarkdown(options.path, { results: `array` })\n\tdata = data.map(data => {\n\t\tdata.data[options.body] = data.content\n\t\treturn data.data\n\t})\n\tdata = unpackAllVariants(data, options)\n\tdata.forEach(datum => {\n\t\tdatum.productId = datum[options.id]\n\t\t//datum.id = `ProductMarkdown-${datum[options.id]}`\n\t\t//console.log(datum)\n\t\tdatum = {\n\t\t\tparent: null,\n\t\t\tchildren: [],\n\t\t\tinternal: {\n\t\t\t\ttype: `ProductMarkdown`,\n\t\t\t\tcontentDigest: crypto\n\t\t\t\t\t.createHash(`md5`)\n\t\t\t\t\t.update(JSON.stringify(datum))\n\t\t\t\t\t.digest(`hex`)\n\t\t\t},\n\t\t\t...datum,\n\t\t\tid: `ProductMarkdown-${datum[options.id]}`\n\t\t}\n\t\tcreateNode(datum)\n\t})\n}"]}