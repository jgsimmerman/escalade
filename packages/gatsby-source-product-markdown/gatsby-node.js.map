{"version":3,"sources":["src/gatsby-node.js"],"names":["options","boundActionCreators","path","id","content","createNode","results","data","map","unpackAllVariants","forEach","datum","productId","console","log","parent","children","internal","type","contentDigest","createHash","update","JSON","stringify","digest","sourceNodes","arr","res","products","unpackVariants","product","concat","obj","variant","variants","ids","push","variantsArr","index","indexOf","splice"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;qFA4CO,wBAAoDA,OAApD;AAAA,MAA6BC,mBAA7B,SAA6BA,mBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACND;AACCE,8CADD;AAECC,eAFD;AAGCC;AAHD,SAIIJ,OAJJ;AAMQK,gBAPF,GAOiBJ,mBAPjB,CAOEI,UAPF;AAAA;AAAA,aASW,4BAAaL,QAAQE,IAArB,EAA2B,EAAEI,gBAAF,EAA3B,CATX;;AAAA;AASFC,UATE;;AAUNA,aAAOA,KAAKC,GAAL,CAAS,gBAAQ;AACvBD,YAAKA,IAAL,CAAUP,QAAQI,OAAlB,IAA6BG,KAAKP,QAAQI,OAAb,CAA7B;AACA,cAAOG,KAAKP,QAAQI,OAAb,CAAP;AACA,cAAOG,KAAKA,IAAZ;AACA,OAJM,CAAP;AAKAA,aAAOE,kBAAkBF,IAAlB,EAAwBP,OAAxB,CAAP;AACAO,WAAKG,OAAL,CAAa,iBAAS;AACrBC,aAAMC,SAAN,GAAkBD,MAAMX,QAAQG,EAAd,CAAlB;AACA;AACAU,eAAQC,GAAR,CAAYH,KAAZ;AACAA;AACCI,gBAAQ,IADT;AAECC,kBAAU,EAFX;AAGCC,kBAAU;AACTC,gCADS;AAETC,wBAAe,iBACbC,UADa,QAEbC,MAFa,CAENC,KAAKC,SAAL,CAAeZ,KAAf,CAFM,EAGba,MAHa;AAFN;AAHX,UAUIb,KAVJ;AAWCR,iCAAuBQ,MAAMX,QAAQG,EAAd;AAXxB;AAaAE,kBAAWM,KAAX;AACA,OAlBD;;AAhBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAec,W;;;;;AA5CtB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAAShB,iBAAT,CAA2BiB,GAA3B,EAAgC1B,OAAhC,EAAwC;AACvC,KAAI2B,MAAM,EAAV;AACAD,KAAIhB,OAAJ,CAAY,mBAAW;AACtB,MAAIkB,WAAWC,eAAeC,OAAf,EAAwB9B,OAAxB,CAAf;AACA2B,QAAMA,IAAII,MAAJ,CAAWH,QAAX,CAAN;AACA,EAHD;AAIA,QAAOD,GAAP;AACA;;AAED,SAASE,cAAT,CAAwBG,GAAxB,EAA6BhC,OAA7B,EAAsC;AACrC,KAAIe,oCACAiB,GADA;AAEHC,WAAS;AAFN,GAAJ;AAIA,KAAI,sBAAOlB,OAAOmB,QAAd,MAA2B,QAA/B,EAAyC;AACxC,SAAO,CAAEnB,MAAF,CAAP;AACA;AACD,KAAIa,WAAW,CAAEb,MAAF,CAAf;AACA,KAAIoB,MAAM,CAAEpB,OAAOf,QAAQG,EAAf,CAAF,CAAV;AACA,KAAI+B,WAAWnB,OAAOmB,QAAtB;AACA,QAAOnB,OAAOmB,QAAd;AACAA,UAASxB,OAAT,CAAiB,mBAAW;AAC3BoB,uCACIE,GADJ,EAEIF,OAFJ;AAGCG,YAAS;AAHV;AAKAE,MAAIC,IAAJ,CAASN,QAAQ9B,QAAQG,EAAhB,CAAT;AACAyB,WAASQ,IAAT,CAAcN,OAAd;AACA,EARD;AASAF,UAASlB,OAAT,CAAiB,mBAAW;AAC3B,MAAI2B,yDAAmBH,QAAnB,EAAJ;AACA,MAAII,QAAQD,YAAYE,OAAZ,CAAoBT,QAAQ3B,EAA5B,CAAZ;AACAkC,cAAYG,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B;AACAR,UAAQI,QAAR,GAAmBG,WAAnB;AACA,EALD;AAMA,QAAOT,QAAP;AACA","file":"gatsby-node.js","sourcesContent":["import crypto from 'crypto'\nimport glob from 'globby'\nimport matter from 'front-matter'\nimport readMarkdown from 'read-markdown'\n\nfunction unpackAllVariants(arr, options){\n\tlet res = []\n\tarr.forEach(product => {\n\t\tlet products = unpackVariants(product, options)\n\t\tres = res.concat(products)\n\t})\n\treturn res\n}\n\nfunction unpackVariants(obj, options) {\n\tlet parent = {\n\t\t...obj,\n\t\tvariant: false,\n\t}\n\tif (typeof parent.variants !== 'object') {\n\t\treturn [ parent ]\n\t}\n\tlet products = [ parent ]\n\tlet ids = [ parent[options.id] ]\n\tlet variants = parent.variants\n\tdelete parent.variants\n\tvariants.forEach(product => {\n\t\tproduct = {\n\t\t\t...obj,\n\t\t\t...product,\n\t\t\tvariant: true,\n\t\t}\n\t\tids.push(product[options.id])\n\t\tproducts.push(product)\n\t})\n\tproducts.forEach(product => {\n\t\tlet variantsArr = [ ...variants ]\n\t\tlet index = variantsArr.indexOf(product.id)\n\t\tvariantsArr.splice(index, 1)\n\t\tproduct.variants = variantsArr\n\t})\n\treturn products\n}\n\nexport async function sourceNodes({ boundActionCreators }, options){\n\toptions = {\n\t\tpath: `./src/markdown/products/**/*.md`,\n\t\tid: `id`,\n\t\tcontent: `content`,\n\t\t...options\n\t}\n\tconst { createNode } = boundActionCreators\n\n\tlet data = await readMarkdown(options.path, { results: `array` })\n\tdata = data.map(data => {\n\t\tdata.data[options.content] = data[options.content]\n\t\tdelete data[options.content]\n\t\treturn data.data\n\t})\n\tdata = unpackAllVariants(data, options)\n\tdata.forEach(datum => {\n\t\tdatum.productId = datum[options.id]\n\t\t//datum.id = `ProductMarkdown-${datum[options.id]}`\n\t\tconsole.log(datum)\n\t\tdatum = {\n\t\t\tparent: null,\n\t\t\tchildren: [],\n\t\t\tinternal: {\n\t\t\t\ttype: `ProductMarkdown`,\n\t\t\t\tcontentDigest: crypto\n\t\t\t\t\t.createHash(`md5`)\n\t\t\t\t\t.update(JSON.stringify(datum))\n\t\t\t\t\t.digest(`hex`)\n\t\t\t},\n\t\t\t...datum,\n\t\t\tid: `ProductMarkdown-${datum[options.id]}`\n\t\t}\n\t\tcreateNode(datum)\n\t})\n}"]}